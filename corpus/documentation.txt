================================================================================
Config
================================================================================

---@config { ["FUNCTION_ORDER"] = "orig" }

--------------------------------------------------------------------------------

(program
  (documentation_config
    (tableconstructor
      (fieldlist
        (field
          (field_left_bracket)
          (string)
          (field_right_bracket)
          (string))))))

================================================================================
Comments before function
================================================================================

--  This is a comment
function not_documented()
end

--------------------------------------------------------------------------------

(program
  (comment)
  (function_declaration
    (function_start)
    (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_end)))

================================================================================
Simple documentation
================================================================================

--- hello world
function cool_function()
  return true
end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_comment))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_body
      (return_statement
        (boolean)))
    (function_end)))


================================================================================
Return (simple) documentation with text
================================================================================

--- With Text
---@return boolean
function in_enabled() end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_comment)
      (doc_return
        type: (doc_type_builtin)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_end)))

================================================================================
Return (named) documentation
================================================================================

---@return boolean enabled
function in_enabled() end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_return
        type: (doc_type_builtin)
        name: (identifier)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_end)))

================================================================================
Return (named, described) documentation
================================================================================

---@return boolean enabled If the item is enabled
function in_enabled() end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
    (doc_return
      type: (doc_type_builtin)
      name: (identifier)
      description: (doc_return_description)))
    (function_start)
      name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_end)))

================================================================================
Return (described with colon) documentation
================================================================================

---@return boolean: If the item is enabled
function in_enabled() end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_return
        type: (doc_type_builtin)
        description: (doc_return_description)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_end)))

================================================================================
Return (described with #) documentation
================================================================================

---@return boolean # If the item is enabled
function in_enabled() end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_return
        type: (doc_type_builtin)
        description: (doc_return_description)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_end)))

================================================================================
Return (optional with union) documentation
================================================================================

---@return boolean|nil error
function in_enabled() end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_return
        type: (doc_type_union
          (doc_type_builtin)
          (doc_type_builtin))
        name: (identifier)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_end)))

================================================================================
Return (optional with ?) documentation
================================================================================

---@return boolean? error
function in_enabled() end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_return
        type: (doc_type_optional
          (doc_type_builtin))
        name: (identifier)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_end)))

================================================================================
Return (variable returns) documentation
================================================================================

---@return integer count Number of nicknames found
---@return string
local function getNicknames() end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_return
        type: (doc_type_builtin)
        name: (identifier)
        description: (doc_return_description))
      (doc_return
      type: (doc_type_builtin)))
    (local)
    (function_start)
    name: (identifier)
    (function_body_paren)
    (function_body_paren)
    (function_end)))

================================================================================
Return documentation with todo
================================================================================

--- With Text
---@todo Something has to be done
function with_text()
  return false
end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_comment)
      (doc_todo))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_body
      (return_statement
        (boolean)))
    (function_end)))

================================================================================
Two lines of top level documentation
================================================================================

--- hello world
--- goodbye world
function cool_function()
  return true
end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_comment)
      (doc_comment))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_body
      (return_statement
        (boolean)))
    (function_end)))


================================================================================
Function param (simple)
================================================================================

---@param username string
---@param foo string|boolean
function setUsername(username, foo) end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_parameter
        name: (identifier)
        type: (doc_type_builtin))
      (doc_parameter
        name: (identifier)
        type: (doc_type_union
          (doc_type_builtin)
          (doc_type_builtin))))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier)
      (identifier))
    (function_body_paren)
    (function_end)))


================================================================================
Function param (simple w/ desc)
================================================================================

---@param username string The name to set for this user
function setUsername(username) end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_parameter
        name: (identifier)
        type: (doc_type_builtin)
        description: (parameter_description)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier))
    (function_body_paren)
    (function_end)))


================================================================================
Function param (optional param)
================================================================================

---@param role "admin"|'user':The name of the role
---@param isActive? boolean :   If the role is currently active
---@return Role
function Role.new(role, isActive) end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_parameter
        name: (identifier)
        type: (doc_type_union
          (doc_literal)
          (doc_literal))
        description: (parameter_description))
      (doc_parameter
        name: (optional_identifier)
        type: (doc_type_builtin)
        description: (parameter_description))
      (doc_return
        type: (doc_identifier)))
    (function_start)
    name: (function_name
      (identifier)
      (table_dot)
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier)
      (identifier))
    (function_body_paren)
    (function_end)))

================================================================================
Function param (varargs)
================================================================================

---@param index integer
---@param ... string Tags to add to this entry
local function addTags(index, ...) end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_parameter
        name: (identifier)
        type: (doc_type_builtin))
      (doc_parameter
        name: (ellipsis)
        type: (doc_type_builtin)
        description: (parameter_description)))
    (local)
    (function_start)
    name: (identifier)
    (function_body_paren)
    (parameter_list
      (identifier)
      (ellipsis))
    (function_body_paren)
    (function_end)))

================================================================================
Full documentation, no return description
================================================================================

--- A function description
---@param p string: param value
---@param x table: another value
---@return true
function cool_function(p, x)
 return true
end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_comment)
      (doc_parameter
        name: (identifier)
        type: (doc_type_builtin)
        description: (parameter_description))
      (doc_parameter
        name: (identifier)
        type: (doc_type_builtin)
        description: (parameter_description))
      (doc_return
        type: (doc_identifier)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier)
      (identifier))
    (function_body_paren)
    (function_body
      (return_statement
        (boolean)))
    (function_end)))

================================================================================
Multiple types with spaces
================================================================================

--- A function description
---@param p string| number : param value
function cool_function(p) end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_comment)
      (doc_parameter
        name: (identifier)
        type: (doc_type_union
          (doc_type_builtin)
          (doc_type_builtin))
        description: (parameter_description)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier))
    (function_body_paren)
    (function_end)))


================================================================================
Generic Function Parameter
================================================================================

---@generic T
---@param objectID integer The ID of the object to set the type of
---@param type `T` The type of object to set
---@return `T` object The object as a Lua object
local function setObjectType(objectID, type) end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_generic
        name: (identifier))
      (doc_parameter
        name: (identifier)
        type: (doc_type_builtin)
        description: (parameter_description))
      (doc_parameter
        name: (identifier)
        type: (doc_identifier)
        description: (parameter_description))
      (doc_return
        type: (doc_identifier)
        name: (identifier)
        description: (doc_return_description)))
    (local)
    (function_start)
    name: (identifier)
    (function_body_paren)
    (parameter_list
      (identifier)
      (identifier))
    (function_body_paren)
    (function_end)))


================================================================================
Custom Type Parameter
================================================================================

---@param mode string
 --- | "'immediate'"  # comment 1 with weird spacing
---|"'async'" # comment 2
function bar(mode) end

--------------------------------------------------------------------------------

(program
  (function_declaration
    documentation: (lua_documentation
      (doc_parameter
        name: (identifier)
        type: (doc_type_builtin)
        (doc_parameter_enum
          type: (doc_literal)
          description: (parameter_description))
        (doc_parameter_enum
          type: (doc_literal)
          description: (parameter_description))))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier))
    (function_body_paren)
    (function_end)))


================================================================================
Literal Custom Type Parameter
================================================================================

local A = 0
local B = 1

---@param active integer
---| `A` # Has a value of 0
---| `B`
function set(active) end

--------------------------------------------------------------------------------

(program
  (variable_declaration
    (local)
    name: (variable_declarator
      (identifier))
    value: (number))
  (variable_declaration
    (local)
    name: (variable_declarator
      (identifier))
    value: (number))

  (function_declaration
    documentation: (lua_documentation
      (doc_parameter
        name: (identifier)
        type: (doc_type_builtin)
        (doc_parameter_enum
          type: (doc_identifier)
          description: (parameter_description))
        (doc_parameter_enum
          type: (doc_identifier))))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier))
    (function_body_paren)
    (function_end)))

;================================================================================
;Should work for variables as well
;================================================================================
;
;--- Example of my_func
;---@param y string: Y description
;M.my_func = function(y)
;end
;
;--------------------------------------------------------------------------------
;
;(program
;  (variable_declaration
;    documentation: (lua_documentation
;      (doc_comment)
;      (doc_parameter
;        name: (identifier)
;        type: (doc_type
;          (doc_identifier))
;        description: (parameter_description)))
;    name: (variable_declarator
;      (identifier)
;      (identifier))
;    value: (function
;      (function_start)
;      (function_body_paren)
;      (parameter_list
;        (identifier))
;      (function_body_paren)
;      (function_end))))
;
;================================================================================
;Real life example from neovim
;================================================================================
;
;--- Store Diagnostic[] by line
;---@param diagnostics Diagnostic[]: hello
;---@return table<number, Diagnostic[]>
;local _diagnostic_lines = function(diagnostics)
;end
;
;--------------------------------------------------------------------------------
;
;(program
;  (variable_declaration
;    documentation: (lua_documentation
;      (doc_comment)
;      (doc_parameter
;        name: (identifier)
;        type: (doc_type
;          (doc_type_array
;            type: (doc_type
;              (doc_identifier))))
;        description: (parameter_description))
;      (doc_return
;        type: (doc_type
;          (doc_type_key_value
;            key: (doc_type
;              (doc_identifier))
;            value: (doc_type
;              (doc_type_array
;                type: (doc_type
;                  (doc_identifier))))))))
;    (local)
;    name: (variable_declarator
;      (identifier))
;    value: (function
;      (function_start)
;      (function_body_paren)
;      (parameter_list
;        (identifier))
;      (function_body_paren)
;      (function_end))))
;
;================================================================================
;Real life example from neovim 2
;================================================================================
;
;--- Save diagnostics to the current buffer.
;---
;--- Handles saving diagnostics from multiple clients in the same buffer.
;---@param diagnostics Diagnostic[]
;---@param bufnr number
;---@param client_id number
;function M.save(diagnostics, bufnr, client_id)
;  validate {
;    diagnostics = {diagnostics, 't'},
;    bufnr = {bufnr, 'n'},
;    client_id = {client_id, 'n', true},
;  }
;end
;
;--------------------------------------------------------------------------------
;
;(program
;  (function_declaration
;    (lua_documentation
;      (doc_comment)
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_type_array
;            (doc_type
;              (doc_identifier)))))
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_identifier)))
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_identifier))))
;    (function_start)
;    (function_name
;      (identifier)
;      (table_dot)
;      (identifier))
;    (function_body_paren)
;    (parameter_list
;      (identifier)
;      (identifier)
;      (identifier))
;    (function_body_paren)
;    (function_body
;      (function_call
;        (identifier)
;        (table_argument
;          (fieldlist
;            (field
;              (identifier)
;              (tableconstructor
;                (fieldlist
;                  (field
;                    (identifier))
;                  (field
;                    (string)))))
;            (field
;              (identifier)
;              (tableconstructor
;                (fieldlist
;                  (field
;                    (identifier))
;                  (field
;                    (string)))))
;            (field
;              (identifier)
;              (tableconstructor
;                (fieldlist
;                  (field
;                    (identifier))
;                  (field
;                    (string))
;                  (field
;                    (boolean)))))))))
;    (function_end)))
;
;================================================================================
;Eval doc
;================================================================================
;
;--- Cooler function, with no params
;---@eval 7 + 15
;function M:even_cooler()
;end
;
;--------------------------------------------------------------------------------
;
;(program
;  (function_declaration
;    (lua_documentation
;      (doc_comment)
;      (doc_eval
;        (binary_operation
;          (number)
;          (number))))
;    (function_start)
;    (function_name
;      (identifier)
;      (table_colon)
;      (identifier))
;    (function_body_paren)
;    (function_body_paren)
;    (function_end)))
;
;================================================================================
;Multiple params
;================================================================================
;
;
;local x = {}
;
;--- This function has documentation
;---@param abc string: Docs for abc
;  ---@param def string: Other docs for def
;---@param bxy string: Final docs
;function x.hello(abc, def, bxy)
;  return abc .. def .. bxy
;end
;
;return x
;
;--------------------------------------------------------------------------------
;
;(program
;  (variable_declaration
;    (local)
;    (variable_declarator
;      (identifier))
;    (tableconstructor))
;  (function_declaration
;    (lua_documentation
;      (doc_comment)
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_identifier))
;        (parameter_description))
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_identifier))
;        (parameter_description))
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_identifier))
;        (parameter_description)))
;    (function_start)
;    (function_name
;      (identifier)
;      (table_dot)
;      (identifier))
;    (function_body_paren)
;    (parameter_list
;      (identifier)
;      (identifier)
;      (identifier))
;    (function_body_paren)
;    (function_body
;      (return_statement
;        (binary_operation
;          (binary_operation
;            (identifier)
;            (identifier))
;          (identifier))))
;    (function_end))
;  (module_return_statement
;    (identifier)))
;
;================================================================================
;Field
;================================================================================
;
;--- This function has documentation
;---@param t table: Some table
;---@field public name x.y: name
;function M.hello(t)
;  return t.name
;end
;
;--------------------------------------------------------------------------------
;
;(program
;  (function_declaration
;    (lua_documentation
;      (doc_comment)
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_identifier))
;        (parameter_description))
;      (doc_field
;        (doc_visibility)
;        (identifier)
;        (doc_type
;          (doc_identifier))
;        (field_description)))
;    (function_start)
;    (function_name
;      (identifier)
;      (table_dot)
;      (identifier))
;    (function_body_paren)
;    (parameter_list
;      (identifier))
;    (function_body_paren)
;    (function_body
;      (return_statement
;        (identifier)
;        (identifier)))
;    (function_end)))
;
;================================================================================
;Class comment
;================================================================================
;
;---@class Array @Numeric table
;
;--------------------------------------------------------------------------------
;
;(program
;  (documentation_class
;    (doc_class
;      (doc_type
;        (doc_identifier))
;      (class_description))))
;
;================================================================================
;Super class comment
;================================================================================
;
;---@class Map @table table
;---@class Array : Map @Numeric table
;
;--------------------------------------------------------------------------------
;
;(program
;  (documentation_class
;    (doc_class
;      (doc_type
;        (doc_identifier))
;      (class_description)))
;  (documentation_class
;    (doc_class
;      (doc_type
;        (doc_identifier))
;      (doc_type
;        (doc_identifier))
;      (class_description))))
;
;================================================================================
;Class with fields
;================================================================================
;
;---@class sqlite @db connection
;
;---@class Stmt @object to deal with sqlite statements
;---@field conn sqlite: connection to database
;
;--------------------------------------------------------------------------------
;
;(program
;  (documentation_class
;    (doc_class
;      (doc_type
;        (doc_identifier))
;      (class_description)))
;  (documentation_class
;    (doc_class
;      (doc_type
;        (doc_identifier))
;      (class_description))
;    (doc_field
;      (identifier)
;      (doc_type
;        (doc_identifier))
;      (field_description))))
;
;================================================================================
;Real world class
;================================================================================
;
;local Job = {}
;--- HEADER
;---@class Job @desc
;---@field cmd string: comamnd
;---@param o table: options
;function Job:new(o)
;  return setmetatable({}, self)
;end
;
;--------------------------------------------------------------------------------
;
;(program
;  (variable_declaration
;    (local)
;    (variable_declarator
;      (identifier))
;    (tableconstructor))
;  (function_declaration
;    (lua_documentation
;      (doc_comment)
;      (doc_class
;        (doc_type
;          (doc_identifier))
;        (class_description))
;      (doc_field
;        (identifier)
;        (doc_type
;          (doc_identifier))
;        (field_description))
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_identifier))
;        (parameter_description)))
;    (function_start)
;    (function_name
;      (identifier)
;      (table_colon)
;      (identifier))
;    (function_body_paren)
;    (parameter_list
;      (identifier))
;    (function_body_paren)
;    (function_body
;      (return_statement
;        (function_call
;          (identifier)
;          (function_call_paren)
;          (function_arguments
;            (tableconstructor)
;            (identifier))
;          (function_call_paren))))
;    (function_end)))
;
;================================================================================
;Using classes as types
;================================================================================
;
;local Job = {}
;
;---@class Map @table lie
;
;--- HEADER
;---@class Job @desc
;---@field cmd string: comamnd
;---@param o table: options
;function Job:new(o)
;  return setmetatable(o, self)
;end
;
;--------------------------------------------------------------------------------
;
;(program
;  (variable_declaration
;    (local)
;    (variable_declarator
;      (identifier))
;    (tableconstructor))
;  (documentation_class
;    (doc_class
;      (doc_type
;        (doc_identifier))
;      (class_description)))
;  (function_declaration
;    (lua_documentation
;      (doc_comment)
;      (doc_class
;        (doc_type
;          (doc_identifier))
;        (class_description))
;      (doc_field
;        (identifier)
;        (doc_type
;          (doc_identifier))
;        (field_description))
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_identifier))
;        (parameter_description)))
;    (function_start)
;    (function_name
;      (identifier)
;      (table_colon)
;      (identifier))
;    (function_body_paren)
;    (parameter_list
;      (identifier))
;    (function_body_paren)
;    (function_body
;      (return_statement
;        (function_call
;          (identifier)
;          (function_call_paren)
;          (function_arguments
;            (identifier)
;            (identifier))
;          (function_call_paren))))
;    (function_end)))
;
;================================================================================
;Brief with embedded strings
;================================================================================
;
;---@brief [[
;--- "a string"
;---@brief ]]
;
;--------------------------------------------------------------------------------
;
;(program
;  (documentation_brief))
;
;================================================================================
;Can do dotted for return
;================================================================================
;
;---@return cmp.ConfigSchema
;config.get = function()
;end
;
;--------------------------------------------------------------------------------
;
;(program
;  (variable_declaration
;    (lua_documentation
;      (doc_return
;        (doc_type
;          (doc_identifier))))
;    (variable_declarator
;      (identifier)
;      (identifier))
;    (function
;      (function_start)
;      (function_body_paren)
;      (function_body_paren)
;      (function_end))))
;
;================================================================================
;Should work with return from test:
;================================================================================
;
;--- This function has documentation
;---@param abc string: Docs for abc
;---@param def string: Other docs for def
;---@param bxy string: Final docs
;---@return string: concat
;function x.hello(abc, def, bxy)
;  return abc .. def .. bxy
;end
;
;--------------------------------------------------------------------------------
;
;(program
;  (function_declaration
;    (lua_documentation
;      (doc_comment)
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_identifier))
;        (parameter_description))
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_identifier))
;        (parameter_description))
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_identifier))
;        (parameter_description))
;      (doc_return
;        (doc_type
;          (doc_identifier))
;        (doc_return_description)))
;    (function_start)
;    (function_name
;      (identifier)
;      (table_dot)
;      (identifier))
;    (function_body_paren)
;    (parameter_list
;      (identifier)
;      (identifier)
;      (identifier))
;    (function_body_paren)
;    (function_body
;      (return_statement
;        (binary_operation
;          (binary_operation
;            (identifier)
;            (identifier))
;          (identifier))))
;    (function_end)))
;
;================================================================================
;Docgen literal strings
;================================================================================
;
;--- This function has docs
;---@param first "This"|"That"
;function Wow(first) end
;
;--------------------------------------------------------------------------------
;
;(program
;  (function_declaration
;    (lua_documentation
;      (doc_comment)
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_literal))
;        (doc_type
;          (doc_literal))))
;    (function_start)
;    (function_name
;      (identifier))
;    (function_body_paren)
;    (parameter_list
;      (identifier))
;    (function_body_paren)
;    (function_end)))
;
;================================================================================
;Docgen table types
;================================================================================
;
;--- This function has a table
;---@param first { hello: string, [5]: boolean }
;function Wow(first) end
;
;--------------------------------------------------------------------------------
;
;(program
;  (function_declaration
;    (lua_documentation
;      (doc_comment)
;      (doc_parameter
;        (identifier)
;        (doc_type
;          (doc_type_dictionary
;            (doc_type_dictionary_value
;              (identifier)
;              (doc_type
;                (doc_identifier)))
;            (doc_type_dictionary_value
;              (number)
;              (doc_type
;                (doc_identifier)))))))
;    (function_start)
;    (function_name
;      (identifier))
;    (function_body_paren)
;    (parameter_list
;      (identifier))
;    (function_body_paren)
;    (function_end)))
;
;================================================================================
;Documentation command
;================================================================================
;
;---@command CodyExplain [[
;--- Something cool goes here
;--- Another thing goes here
;---@command ]]
;
;
;--------------------------------------------------------------------------------
;
;(program
;  (documentation_command
;    (documentation_usage)
;    (documentation_command_content)
;    (documentation_command_content)))
